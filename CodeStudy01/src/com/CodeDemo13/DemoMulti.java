package com.CodeDemo13;
/**
 * 代码中体现多态性，其实就是一句话，父类引用指向子类对象   子类对象被当作父类进行使用 一只猫被当作动物看待
 * 格式(多态的前提条件是 父子类/接口)：
 * 父类名称  对象名  =  new  子类名称();
 * 或者：
 * 接口名称  对象名  =  new  实现类名();
 *
 * 访问成员变量的两种方式：
 * 1.直接通过对象名称访问；看等号左边是谁，就优先用谁，没有则向上找
 * 2.间接通过成员方法访问；看该方法属于谁优先用谁，没有则向上找
 *
 * 成员方法的访问规则：
 * 看new的是谁，就优先用谁，没有就向上找
 * 成员方法口诀：编译看左，运行看右  成员变量口诀：编译看左边，运行也看左边
 */
public class DemoMulti {
    public static void main(String[] args) {
        //多态的写法
        //左侧父类的引用，指向了右侧子类的对象
        Fu obj = new Zi();
        obj.method(); //父子都有，则用的是子
        obj.methodFu();//子类没有，父类有，则向上找到父类使用

        //多态访问成员变量  直接通过对象名称访问
        System.out.println(obj.num);
        System.out.println("===============");
        //多态访问成员变量
        //子类覆盖重写了方法 ， 用子
        //子类没有覆盖重写，用父
        obj.showNum();

        //编译看左，左边是Fu类，Fu类中没有Zi方法 ，编译报错。
//        obj.methodZi();//错误写法

    }
}
